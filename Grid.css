/* grid-explicit */


.grid-explicit {
  display: grid;

  grid-template-columns: 20% repeat(2, 30%) 20%;
  grid-template-rows: repeat(5, auto);

  /* Atajo */

  grid-template: repeat(5, auto) / 20% repeat(2, 30%) 20%;  /* grid-template: rows / columns */
}

.grid-explicit .item:nth-child(10) {
  color: red;

  grid-row-start: 2;
  grid-row-end: 3;
  grid-column-start: 2;
  grid-column-end: 3;

  /* Atajo */

  grid-row: 2 / 3;                                          /*  grid-row: start / end */
  grid-column: 3 / 5;                                       /*  grid-column: start / end */

  /* ShortCut */

  grid-area: 2 / 3 / 3 / 5;                                 /* grid-area: grid-row-start / grid-row-end / grid-column-start / grid-column-end */
}

.grid-explicit .item:nth-child(12) {
  color: cyan;

  /* Span = abarca*/

  grid-row: span 2;
  grid-column: span 3;
}

.grid-explicit .item:nth-child(15) {
  color: darkorange;
  grid-row: 1 / span 2;                                      /* grid-row: grid line donde empieza / abarca 2 espacios o celdas */
  grid-column: 1 / span 2;                                   /* grid-row: grid line donde empieza / abarca 2 espacios o celdas */
}



/* Posicionamiento con nombres de Grid Lines */


.grid-line-names {
  display: grid;
  grid-template: repeat(3, 1fr) /repeat (3, 1fr);
  grid-template-rows: [line-r1] 1fr [line-r2] 1fr [line-r3] 1fr [line-r4];
  grid-template-columns: [line-c1] 1fr [line-c2] 1fr [line-c3] 1fr [line-c4];
}

.grid-line-names .item:nth-child(3) {
  color: cyan;
  grid-row: line-r3 / line-r4;
  grid-column: line-c1 / line-c4;

  /* Con grid-area no funciona hacer esta Grid-line-names */
}



/* Posicionamiento con Grid Areas */


.grid-areas {
  display: grid;
  grid-template:100px repeat(2, 1fr) 60px / 1fr 200px;
  grid-template-areas:
    "header header"
    "content sidebar"
    "content ."
    "footer footer";
}

.header{
  grid-area: header;
}
.content{
  grid-area: content;
}
.sidebar{
  grid-area: sidebar;
}
.footer{
  grid-area: footer;
}



/* Grid Implícita. Grids de bloque y de línea */


.grid-implicit {
  width: 40%;
  display: grid;
  display: inline-grid;                     /* ocupa todo el espacio que ocupa su contenido, pero no es posible agregar un widht o un widht e igualmanera un padding o margor en su top o bottom */

  grid-template: repeat(3, 200px) / repeat(4, 1fr);
}


/* Flujo de la Grid (Grid Flow) */


.grid-flow {
  display: grid;
  grid-template: repeat(3, 150px) / repeat(5, 1fr);

  grid-auto-flow: row;               /* Da la direccion del flujo de los items (filas o columnas) en la grid: su valor por defecto es row  */
  grid-auto-rows: 80px 100px;        /* Expecifica el tamaño que tendra los items sobrantes en su height */

  grid-auto-flow: column;            /* Da la direccion del flujo de los items en colundo con flujo de a la derecha */
  grid-auto-columns: 80px 100px;     /* Expecifica el tamaño que tendra los items sobrantes en su widht */

}


/* Flujo denso de la grid */


.grid-flow-dense {
  display: grid;
  grid-template: repeat(4, 1fr) / repeat(5, 1fr);
  grid-auto-flow: row dense;        /* Dense: rellena los espacios que se hacen cuando un item ocupa mas espacio que pude ocupar dontro del numero de rows que ha de manera explicita en la grid*/
}

.grid-flow-dense .item:nth-child(9) {
  color: red;
  grid-row: span 3;
  grid-column: span 3;
}


.grid-flow-dense1 {
  display: grid;
  grid-template: repeat(4, 1fr) / repeat(5, 1fr);
  grid-auto-flow: column dense;     /* Dense: rellena los espacios que se hacen cuando un item ocupa mas espacio que pude ocupar dontro del numero de columns que ha de manera explicita en la grid */
}

.grid-flow-dense1 .item:nth-child(9) {
  color: red;
  grid-row: span 3;
  grid-column: span 3;
}



/* Grid Layers: Celdas en capas (superposición) */


.grid-layers {
  display: grid;
  grid-template: repeat(4, 1fr) / repeat(4, 1fr);
}

.grid-layers .items:nth-child(1){
  grid-row: 1 / 3;
  grid-column: 1 / 3;
  background-color: yellow;
}
.grid-layers .items:nth-child(2){
  grid-row: 1 / 3;
  grid-column: 3 / end;
  background-color: #006eff;
}
.grid-layers .items:nth-child(3){
  grid-row: 3 / end;
  grid-column: 1 / 3;
  background-color: #00912b;
}
.grid-layers .items:nth-child(4){
  grid-row: 3 / end;
  grid-column: 3 / end;
  background-color: rgb(255, 115, 0);
}
.grid-layers .items:nth-child(5){
  grid-row: 2 / 4;
  grid-column: 2 / 4;
  background-color: rgb(252, 34, 70);
  opacity: .75;
}


/* Orden */



.grid-order {
  display: grid;
  grid-template: repeat(2, 1fr) /repeat(3, 1fr);
}

.grid-order_1 {
  display: grid;
  grid-template: repeat(2, 1fr) /repeat(3, 1fr);
  grid-auto-flow: column;
}

.grid-order .item:nth-child(1),
.grid-order_1 .item:nth-child(1) {
  order: 1;
}

.grid-order .item:nth-child(2),
.grid-order_1 .item:nth-child(2) {
  order: 2;
}
.grid-order .item:nth-child(5),
.grid-order_1 .item:nth-child(5) {
  order: -1;
}


/* Alineación de Grid Items */



.grid-align {
  display: grid;
  grid-template: repeat(2, 200px) / repeat(3, 200px);

  /* justify-items: alinea el contenido (en este calo las etiquetas p) en el main axis (eje x), su valor por defecto es stretch */
  /* stretch (ocupa todo el espacio del item) | start | center | end */
  justify-items: center;


  /* justify-items: alinea el contenido (en este calo las etiquetas p) en el cross axis (eje y), su valor por defecto es stretch */
  /* stretch (ocupa todo el espacio del item) | start | center | end | flex-start | flex-end */

  align-items: center;
}

.grid-align .item:nth-child(2) {

  /* justify-self: alinea el item en especifico en el main axis*/
  /* align-self: alinea el item en especifico en el cross axis*/

  /* stretch (ocupa todo el espacio del item) | start | center | end | flex-start | flex-end */

  justify-self: start;
  align-self: start;
}

.grid-align .item:nth-child(4) {
  display: flex;
  flex-flow: column nowrap;
  justify-self: start;
  align-self: start;
}


/* Alineación de Grid Tracks */



.grid-align-tracks {
  display: grid;
  grid-template: repeat(2, 200px) / repeat(3, 200px);

  justify-content: space-evenly;           /* Alinea los tracks en el main axis: start | center | end | space-between | space-around | space-evenly*/
  align-content: space-evenly;    /* Alinea los tracks en el cross axis: start | center | end | space-between | space-around | space-evenly*/
}


/* Tamaños Máximos y Mínimos de Grid Tracks */



.grid-min-max {
  display: grid;

  grid-template-columns: repeat(4, 1fr);
  grid-template-columns: repeat(4, minmax(100px, 200px));/* Esteblece el minimo y maximo de ancho o alto (si es columna o fila) de un item */

  /* min-content: El ancho minimo de la track dependera del ancho minimo del contenido. Si se pone texto, el ancho sera el ancho de la pálabra más grande */

  /* max-content: El ancho maximo de la track dependera del ancho maximo del contenido. En un texto, el maximoa ancho seria de todo el texto que tenga la etiqueta p */

  grid-template-columns: repeat(4, minmax(min-content, 200px));
  grid-template-columns: repeat(4, minmax(200px, min-content));/*Adaptate hasta el manimo contenido(hasta el ancho de la letra más grande)*/
  grid-template-columns: repeat(4, minmax(max-content, 200px));/*Adaptate hasta el manimo contenido(toma el ancho de la etiqueta p)*/
  grid-template-columns: repeat(4, minmax(200px, max-content));/*Adaptate hasta el maximo contenido(toma el ancho de la etiqueta p)*/
  grid-template-columns: repeat(4, minmax(min-content, max-content)); /* Minimo seria asta el ancho de la letra más grande y Maximo toma el ancho de la etiqueta p */
}


/* Grids con Patrones Repetitivos */



.grid-repeat {
  display: grid;

  /* Patron repetitivo en columna en una grid explicita*/

  grid-template-columns: repeat(4, 10% 20% 30% 50%);  /* Repite 4 veces este patron hacla la derecha */
  grid-template-columns: repeat(3, 10% 20% 30% 50%);  /* Repite 3 veces este patron hacla la derecha */
  grid-template-columns: repeat(2, 10% 20% 30% 50%);  /* Repite 2 veces este patron hacla la derecha */
  grid-template-columns: repeat(1, 10% 20% 30% 50%);  /* Repite 1 veces este patron hacla la derecha */

  /* Patron repetitivo en filas en una grid explicita*/

  grid-template-rows: repeat(2, 100px 200px);         /* Repite 2 veces este patron hacla la derecha */


  /* Patron repetitivo en columna en una grid implicita*/

  grid-auto-rows: 100px 200px;
}


/* Grids Dinámicas */


.grid-dynamics {
  display: grid;
  grid-template-columns: repeat(4, 100px);

  /*auto-fill: Rellena la grid con espacios para se puedan agragarse más tracks de forma dinamica,cuando nosotros creamos mas items en HTML*/
  grid-template-columns: repeat(auto-fill, 100px);

  /*auto-fill: el tamaño de la grid dependera de cuantos items halla */
  grid-template-columns: repeat(auto-fit, 100px);

  /*auto-fill con minmax: crea una funcion como flex-wrap, pero si hay pocos items en la grid (la grid no esta llena), dicha funcion funcionara cuando empieze a afectar al primer item que encuente el tamaño limite de pantalla*/
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));

  /*auto-fill con minmax: crea una funcion como flex-wrap, pero si hay pocos items en la grid, dichos items podran crecer de hasta alcanzar el tamaño de la grid*/
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
}


/* Responsive sin Media Queries */



.grid-responsive {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
}


/* Grids Anidadas */



.grid-nested {
  display: grid;
  grid-template-columns: repeat(3, 1fr)
}